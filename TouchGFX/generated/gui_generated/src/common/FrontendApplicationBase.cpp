/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/seznam_screen/SeznamView.hpp>
#include <gui/seznam_screen/SeznamPresenter.hpp>
#include <gui/labirint_naslovnica_screen/Labirint_naslovnicaView.hpp>
#include <gui/labirint_naslovnica_screen/Labirint_naslovnicaPresenter.hpp>
#include <gui/kaca_naslovnica_screen/Kaca_naslovnicaView.hpp>
#include <gui/kaca_naslovnica_screen/Kaca_naslovnicaPresenter.hpp>
#include <gui/labirint_screen/LabirintView.hpp>
#include <gui/labirint_screen/LabirintPresenter.hpp>
#include <gui/kaca_screen/KacaView.hpp>
#include <gui/kaca_screen/KacaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
}

/*
 * Screen Transition Declarations
 */

// Seznam

void FrontendApplicationBase::gotoSeznamScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSeznamScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSeznamScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SeznamView, SeznamPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoSeznamScreenCoverTransitionWest()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSeznamScreenCoverTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSeznamScreenCoverTransitionWestImpl()
{
    touchgfx::makeTransition<SeznamView, SeznamPresenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Labirint_naslovnica

void FrontendApplicationBase::gotoLabirint_naslovnicaScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLabirint_naslovnicaScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLabirint_naslovnicaScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<Labirint_naslovnicaView, Labirint_naslovnicaPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoLabirint_naslovnicaScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLabirint_naslovnicaScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLabirint_naslovnicaScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<Labirint_naslovnicaView, Labirint_naslovnicaPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Kaca_naslovnica

void FrontendApplicationBase::gotoKaca_naslovnicaScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoKaca_naslovnicaScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoKaca_naslovnicaScreenCoverTransitionEastImpl()
{
    touchgfx::makeTransition<Kaca_naslovnicaView, Kaca_naslovnicaPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoKaca_naslovnicaScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoKaca_naslovnicaScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoKaca_naslovnicaScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<Kaca_naslovnicaView, Kaca_naslovnicaPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Labirint

void FrontendApplicationBase::gotoLabirintScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLabirintScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLabirintScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<LabirintView, LabirintPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Kaca

void FrontendApplicationBase::gotoKacaScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoKacaScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoKacaScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<KacaView, KacaPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
